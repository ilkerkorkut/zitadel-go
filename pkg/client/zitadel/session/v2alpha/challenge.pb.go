// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: zitadel/session/v2alpha/challenge.proto

package session

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeKind int32

const (
	ChallengeKind_CHALLENGE_KIND_UNSPECIFIED ChallengeKind = 0
	ChallengeKind_CHALLENGE_KIND_PASSKEY     ChallengeKind = 1
)

// Enum value maps for ChallengeKind.
var (
	ChallengeKind_name = map[int32]string{
		0: "CHALLENGE_KIND_UNSPECIFIED",
		1: "CHALLENGE_KIND_PASSKEY",
	}
	ChallengeKind_value = map[string]int32{
		"CHALLENGE_KIND_UNSPECIFIED": 0,
		"CHALLENGE_KIND_PASSKEY":     1,
	}
)

func (x ChallengeKind) Enum() *ChallengeKind {
	p := new(ChallengeKind)
	*p = x
	return p
}

func (x ChallengeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_session_v2alpha_challenge_proto_enumTypes[0].Descriptor()
}

func (ChallengeKind) Type() protoreflect.EnumType {
	return &file_zitadel_session_v2alpha_challenge_proto_enumTypes[0]
}

func (x ChallengeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeKind.Descriptor instead.
func (ChallengeKind) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_session_v2alpha_challenge_proto_rawDescGZIP(), []int{0}
}

type Challenges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passkey *Challenges_Passkey `protobuf:"bytes,1,opt,name=passkey,proto3,oneof" json:"passkey,omitempty"`
}

func (x *Challenges) Reset() {
	*x = Challenges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2alpha_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenges) ProtoMessage() {}

func (x *Challenges) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2alpha_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenges.ProtoReflect.Descriptor instead.
func (*Challenges) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2alpha_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *Challenges) GetPasskey() *Challenges_Passkey {
	if x != nil {
		return x.Passkey
	}
	return nil
}

type Challenges_Passkey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyCredentialRequestOptions *structpb.Struct `protobuf:"bytes,1,opt,name=public_key_credential_request_options,json=publicKeyCredentialRequestOptions,proto3" json:"public_key_credential_request_options,omitempty"`
}

func (x *Challenges_Passkey) Reset() {
	*x = Challenges_Passkey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2alpha_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenges_Passkey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenges_Passkey) ProtoMessage() {}

func (x *Challenges_Passkey) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2alpha_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenges_Passkey.ProtoReflect.Descriptor instead.
func (*Challenges_Passkey) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2alpha_challenge_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Challenges_Passkey) GetPublicKeyCredentialRequestOptions() *structpb.Struct {
	if x != nil {
		return x.PublicKeyCredentialRequestOptions
	}
	return nil
}

var File_zitadel_session_v2alpha_challenge_proto protoreflect.FileDescriptor

var file_zitadel_session_v2alpha_challenge_proto_rawDesc = []byte{
	0x0a, 0x27, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcc, 0x05, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x1a, 0xe5, 0x04, 0x0a, 0x07,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0xd9, 0x04, 0x0a, 0x25, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0xed, 0x03, 0x92, 0x41, 0xe9, 0x03, 0x32, 0xfa, 0x01, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x2e, 0x20, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x4a, 0x53, 0x4f,
	0x4e, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20,
	0x57, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x20, 0x53, 0x65, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52,
	0x2f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x23, 0x64, 0x69, 0x63, 0x74, 0x64,
	0x65, 0x66, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4a, 0xe9, 0x01, 0x7b, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22,
	0x41, 0x54, 0x6d, 0x71, 0x42, 0x67, 0x2d, 0x39, 0x39, 0x71, 0x79, 0x4f, 0x5a, 0x6b, 0x32, 0x7a,
	0x6c, 0x6f, 0x50, 0x64, 0x4a, 0x51, 0x79, 0x53, 0x32, 0x52, 0x37, 0x49, 0x6b, 0x46, 0x54, 0x37,
	0x76, 0x39, 0x48, 0x6f, 0x6f, 0x73, 0x5f, 0x42, 0x5f, 0x6e, 0x4d, 0x22, 0x2c, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x6b, 0x65, 0x79, 0x22,
	0x7d, 0x5d, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22,
	0x47, 0x41, 0x4f, 0x48, 0x59, 0x7a, 0x32, 0x6a, 0x45, 0x36, 0x39, 0x6b, 0x4a, 0x4d, 0x59, 0x6f,
	0x36, 0x4c, 0x61, 0x69, 0x6a, 0x38, 0x79, 0x57, 0x77, 0x39, 0x2d, 0x64, 0x4b, 0x4b, 0x67, 0x62,
	0x56, 0x69, 0x4e, 0x68, 0x66, 0x75, 0x79, 0x30, 0x53, 0x74, 0x41, 0x22, 0x2c, 0x22, 0x72, 0x70,
	0x49, 0x64, 0x22, 0x3a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x2c,
	0x22, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x3a, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x2c, 0x22, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x7d, 0x7d,
	0x52, 0x21, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x2a,
	0x4b, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x3b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_zitadel_session_v2alpha_challenge_proto_rawDescOnce sync.Once
	file_zitadel_session_v2alpha_challenge_proto_rawDescData = file_zitadel_session_v2alpha_challenge_proto_rawDesc
)

func file_zitadel_session_v2alpha_challenge_proto_rawDescGZIP() []byte {
	file_zitadel_session_v2alpha_challenge_proto_rawDescOnce.Do(func() {
		file_zitadel_session_v2alpha_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_session_v2alpha_challenge_proto_rawDescData)
	})
	return file_zitadel_session_v2alpha_challenge_proto_rawDescData
}

var file_zitadel_session_v2alpha_challenge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zitadel_session_v2alpha_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zitadel_session_v2alpha_challenge_proto_goTypes = []interface{}{
	(ChallengeKind)(0),         // 0: zitadel.session.v2alpha.ChallengeKind
	(*Challenges)(nil),         // 1: zitadel.session.v2alpha.Challenges
	(*Challenges_Passkey)(nil), // 2: zitadel.session.v2alpha.Challenges.Passkey
	(*structpb.Struct)(nil),    // 3: google.protobuf.Struct
}
var file_zitadel_session_v2alpha_challenge_proto_depIdxs = []int32{
	2, // 0: zitadel.session.v2alpha.Challenges.passkey:type_name -> zitadel.session.v2alpha.Challenges.Passkey
	3, // 1: zitadel.session.v2alpha.Challenges.Passkey.public_key_credential_request_options:type_name -> google.protobuf.Struct
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_zitadel_session_v2alpha_challenge_proto_init() }
func file_zitadel_session_v2alpha_challenge_proto_init() {
	if File_zitadel_session_v2alpha_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_session_v2alpha_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2alpha_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenges_Passkey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_session_v2alpha_challenge_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_session_v2alpha_challenge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_session_v2alpha_challenge_proto_goTypes,
		DependencyIndexes: file_zitadel_session_v2alpha_challenge_proto_depIdxs,
		EnumInfos:         file_zitadel_session_v2alpha_challenge_proto_enumTypes,
		MessageInfos:      file_zitadel_session_v2alpha_challenge_proto_msgTypes,
	}.Build()
	File_zitadel_session_v2alpha_challenge_proto = out.File
	file_zitadel_session_v2alpha_challenge_proto_rawDesc = nil
	file_zitadel_session_v2alpha_challenge_proto_goTypes = nil
	file_zitadel_session_v2alpha_challenge_proto_depIdxs = nil
}
